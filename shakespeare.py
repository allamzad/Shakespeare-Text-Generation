# -*- coding: utf-8 -*-
"""miniproject3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oR51pQJVoT_-YLZmNjSjKGNManbvzRYQ

# Miniproject 3: Poem Generation

### Download Data
"""

import requests

url_dict = {
    'shakespeare.txt': 'https://caltech-cs155.s3.us-east-2.amazonaws.com/miniprojects/project3/data/shakespeare.txt',
    'spenser.txt': 'https://caltech-cs155.s3.us-east-2.amazonaws.com/miniprojects/project3/data/spenser.txt',
    'syllable_dict.txt' : 'https://caltech-cs155.s3.us-east-2.amazonaws.com/miniprojects/project3/data/Syllable_dictionary.txt',
    'about_syllable_dict.docx' : 'https://caltech-cs155.s3.us-east-2.amazonaws.com/miniprojects/project3/data/syllable_dict_explanation.docx'
}

def download_file(file_path):
    url = url_dict[file_path]
    print('Start downloading...')
    with requests.get(url, stream=True) as r:
        r.raise_for_status()
        with open(file_path, 'wb') as f:
            for chunk in r.iter_content(chunk_size=1024 * 1024 * 1024):
                f.write(chunk)
    print('Complete')

download_file('shakespeare.txt')
download_file('spenser.txt')
download_file('syllable_dict.txt')
download_file('about_syllable_dict.docx')

"""### Importing packages \& Preprocessing"""

import random
import numpy as np
import os
import re
import urllib.request
np.random.seed(seed=123) # Do not change
import matplotlib.pyplot as plt
from wordcloud import WordCloud
from matplotlib import animation
from matplotlib.animation import FuncAnimation
import nltk
from nltk.corpus import cmudict
nltk.download('cmudict')

"""### Initialize syllables dictionary"""

# Source: https://datascience.stackexchange.com/questions/23376/how-to-get-the-number-of-syllables-in-a-word
d = cmudict.dict()
def nsyl(word):
  return [str(len(list(y for y in x if y[-1].isdigit()))) for x in d[word.lower()]]

syllable_dict = {}
with open('syllable_dict.txt', 'r') as f:
    syllables = f.readlines()
    syllables = [syllable.strip().split(" ") for syllable in syllables]
    for syllable in syllables:
        word = syllable[0]
        syllable_dict[word] = syllable[1:]

"""Initialize dataset"""

outlier_sonnets = ["99", "126"] # Sonnets with 15/12 lines

"""### Sonnets"""

# X = []
# word_id_dict = {}
# fixed_len_seqs = {}
# all_text = ""
# id = 0
# with open('shakespeare.txt', 'r') as f:
#     lines = f.readlines()
#     lines = [line.strip() for line in lines]
#     for i, line in enumerate(lines):
#         if line.isnumeric() and line not in outlier_sonnets:
#             sonnet_lines = lines[i+1 : i+15]
#             sonnet_string = " ".join(sonnet_lines)
#             # Remove characters that are not part of the word
#             removed_chars = ",.;:?!()"
#             sonnet_string = "".join([c for c in sonnet_string if c not in removed_chars])
#             sonnet_words = sonnet_string.lower().split()
#             # Add word to id dictionary if it isn't recorded
#             for word in sonnet_words:
#               if word not in word_id_dict:
#                 word_id_dict[word] = id
#                 id += 1
#             sonnet_words_id = list(map(lambda word: word_id_dict[word], sonnet_words))
#             X.append(sonnet_words_id)
#             for s_line in sonnet_lines:
#                 all_text += s_line + "\n"

# index = 0
# all_i = 0
# while all_i < len(all_text) - 40:
#   fixed_len_seqs[index] = all_text[i:i + 40]
#   all_i += 200
#   index += 1

"""### Stanzas"""

X = []
word_id_dict = {}
id = 0
with open('shakespeare.txt', 'r') as f:
    lines = f.readlines()
    lines = [line.strip() for line in lines]
    for i, line in enumerate(lines):
        if line.isnumeric() and line not in outlier_sonnets:
            sonnet_lines = lines[i+1 : i+15]
            quatrain_lines = [0, 4, 8, 12, 14]
            quatrains = [sonnet_lines[quatrain_lines[i-1] : quatrain_lines[i]] for i in range(1, 5)]
            for quatrain in quatrains:
                quatrain_string = " ".join(quatrain)
                # Remove characters that are not part of the word
                removed_chars = ",.;:?!()"
                quatrain_string = "".join([c for c in quatrain_string if c not in removed_chars])
                quatrain_words = quatrain_string.lower().split()
                # Add word to id dictionary if it isn't recorded
                for word in quatrain_words:
                  if word not in word_id_dict:
                    word_id_dict[word] = id
                    id += 1
                quatrain_words_id = list(map(lambda word: word_id_dict[word], quatrain_words))
                X.append(quatrain_words_id)

with open('spenser.txt', 'r') as f:
    lines = f.readlines()
    lines = [line.strip() for line in lines]
    for i, line in enumerate(lines):
        if len(line.split()) == 1 and line != ":poem":
          sonnet_lines = lines[i+2 : i+16]
          quatrain_lines = [0, 4, 8, 12, 14]
          quatrains = [sonnet_lines[quatrain_lines[i-1] : quatrain_lines[i]] for i in range(1, 5)]
          for quatrain in quatrains:
              quatrain_string = " ".join(quatrain)
              # Remove characters that are not part of the word
              removed_chars = ",.;:?!()"
              quatrain_string = "".join([c for c in quatrain_string if c not in removed_chars])
              quatrain_words = quatrain_string.lower().split()
              # Add word to id dictionary if it isn't recorded
              for word in quatrain_words:
                if word not in word_id_dict:
                  word_id_dict[word] = id
                  id += 1
              quatrain_words_id = list(map(lambda word: word_id_dict[word], quatrain_words))
              X.append(quatrain_words_id)

"""### Lines"""

# X = []
# word_id_dict = {}
# id = 0
# with open('shakespeare.txt', 'r') as f:
#     lines = f.readlines()
#     lines = [line.strip() for line in lines]
#     for i, line in enumerate(lines):
#         if line.isnumeric() and line not in outlier_sonnets:
#             sonnet_lines = lines[i+1 : i+15]
#             for line_string in sonnet_lines:
#                 # Remove characters that are not part of the word
#                 removed_chars = ",.;:?!()"
#                 line_string = "".join([c for c in line_string if c not in removed_chars])
#                 line_words = line_string.lower().split()
#                 # Add word to id dictionary if it isn't recorded
#                 for word in line_words:
#                   if word not in word_id_dict:
#                     word_id_dict[word] = id
#                     id += 1
#                 line_words_id = list(map(lambda word: word_id_dict[word], line_words))
#                 X.append(line_words_id)

"""### Rhyme"""

line_list = []
rhyme_dict = {}
with open('shakespeare.txt', 'r') as f:
    lines = f.readlines()
    lines = [line.strip() for line in lines]
    for i, line in enumerate(lines):
        if line.isnumeric() and line not in outlier_sonnets:
            sonnet_lines = lines[i+1 : i+15]
            for line_string in sonnet_lines:
                # Remove characters that are not part of the word
                removed_chars = ",.;:?!()"
                line_string = "".join([c for c in line_string if c not in removed_chars])
                line_words = line_string.lower().split()
                line_list.append(line_words)

for i, line in enumerate(line_list):
  if i%14 == 0:
    rhyming_lines = [(0, 2), (1, 3), (4, 6), (5, 7), (8, 10), (9, 11), (12, 13)]
    for (a, b) in rhyming_lines:
      word_a = line_list[i+a][-1]
      word_b = line_list[i+b][-1]
      if word_a not in rhyme_dict:
        rhyme_dict[word_a] = []
      if word_b not in rhyme_dict:
        rhyme_dict[word_b] = []
      rhyme_dict[word_a].append(word_b)
      rhyme_dict[word_b].append(word_a)

"""# Implementing Models

## HMM Code

### HMM Class
"""

class HiddenMarkovModel:
    '''
    Class implementation of Hidden Markov Models.
    '''

    def __init__(self, A, O):
        '''
        Initializes an HMM. Assumes the following:
            - States and observations are integers starting from 0.
            - There is a start state (see notes on A_start below). There
              is no integer associated with the start state, only
              probabilities in the vector A_start.
            - There is no end state.
        Arguments:
            A:          Transition matrix with dimensions L x L.
                        The (i, j)^th element is the probability of
                        transitioning from state i to state j. Note that
                        this does not include the starting probabilities.
            O:          Observation matrix with dimensions L x D.
                        The (i, j)^th element is the probability of
                        emitting observation j given state i.
        Parameters:
            L:          Number of states.

            D:          Number of observations.

            A:          The transition matrix.

            O:          The observation matrix.

            A_start:    Starting transition probabilities. The i^th element
                        is the probability of transitioning from the start
                        state to state i. For simplicity, we assume that
                        this distribution is uniform.
        '''

        self.L = len(A)
        self.D = len(O[0])
        self.A = A
        self.O = O
        self.A_start = [1. / self.L for _ in range(self.L)]


    def viterbi(self, x):
        '''
        Uses the Viterbi algorithm to find the max probability state
        sequence corresponding to a given input sequence.
        Arguments:
            x:          Input sequence in the form of a list of length M,
                        consisting of integers ranging from 0 to D - 1.
        Returns:
            max_seq:    State sequence corresponding to x with the highest
                        probability.
        '''

        M = len(x)      # Length of sequence.

        # The (i, j)^th elements of probs and seqs are the max probability
        # of the prefix of length i ending in state j and the prefix
        # that gives this probability, respectively.
        #
        # For instance, probs[1][0] is the probability of the prefix of
        # length 1 ending in state 0.
        probs = [[0. for _ in range(self.L)] for _ in range(M + 1)]
        seqs = [['' for _ in range(self.L)] for _ in range(M + 1)]

        for i in range(self.L):
          probs[1][i] = self.A_start[i] * self.O[i][x[0]]
          seqs[1][i] = str(i)


        for d in range(2, M + 1):

          for curr_state in range(self.L):
            max_prob = float("-inf")
            best_seq = ""

            for prev_state in range(self.L):
              prob = probs[d-1][prev_state] * self.A[prev_state][curr_state] * self.O[curr_state][x[d-1]]
              if prob >= max_prob:
                max_prob = prob
                best_seq = seqs[d-1][prev_state] + str(curr_state)

            probs[d][curr_state] = max_prob
            seqs[d][curr_state] = best_seq

        max_seq = seqs[M][np.argmax(probs[M])]
        return max_seq


    def forward(self, x, normalize=False):
        '''
        Uses the forward algorithm to calculate the alpha probability
        vectors corresponding to a given input sequence.
        Arguments:
            x:          Input sequence in the form of a list of length M,
                        consisting of integers ranging from 0 to D - 1.
            normalize:  Whether to normalize each set of alpha_j(i) vectors
                        at each i. This is useful to avoid underflow in
                        unsupervised learning.
        Returns:
            alphas:     Vector of alphas.
                        The (i, j)^th element of alphas is alpha_j(i),
                        i.e. the probability of observing prefix x^1:i
                        and state y^i = j.
                        e.g. alphas[1][0] corresponds to the probability
                        of observing x^1:1, i.e. the first observation,
                        given that y^1 = 0, i.e. the first state is 0.
        '''

        M = len(x)      # Length of sequence.
        alphas = [[0. for _ in range(self.L)] for _ in range(M + 1)]

        for i in range(self.L):
          alphas[1][i] = self.A_start[i] * self.O[i][x[0]]

        for d in range(2, M + 1):

          for curr_state in range(self.L):
            prob = 0
            for prev_state in range(self.L):
              prob += (self.O[curr_state][x[d-1]] * (alphas[d-1][prev_state] * self.A[prev_state][curr_state]))

            alphas[d][curr_state] = prob

          if normalize:
            denom = np.sum(alphas[d])
            alphas[d] = [alpha/denom for alpha in alphas[d]]


        return alphas


    def backward(self, x, normalize=False):
        '''
        Uses the backward algorithm to calculate the beta probability
        vectors corresponding to a given input sequence.
        Arguments:
            x:          Input sequence in the form of a list of length M,
                        consisting of integers ranging from 0 to D - 1.
            normalize:  Whether to normalize each set of alpha_j(i) vectors
                        at each i. This is useful to avoid underflow in
                        unsupervised learning.
        Returns:
            betas:      Vector of betas.
                        The (i, j)^th element of betas is beta_j(i), i.e.
                        the probability of observing prefix x^(i+1):M and
                        state y^i = j.
                        e.g. betas[M][0] corresponds to the probability
                        of observing x^M+1:M, i.e. no observations,
                        given that y^M = 0, i.e. the last state is 0.
        '''

        M = len(x)      # Length of sequence.
        betas = [[0. for _ in range(self.L)] for _ in range(M + 1)]

        for i in range(self.L):
          betas[M][i] = 1

        for d in range(M - 1, -1, -1):

          for curr_state in range(self.L):
            prob = 0
            for next_state in range(self.L):
                if d == 0:
                  prob += (betas[d+1][next_state] * self.A_start[next_state] * self.O[next_state][x[d]])
                else:
                  prob += (betas[d+1][next_state] * self.A[curr_state][next_state] * self.O[next_state][x[d]])

            betas[d][curr_state] = prob

          if normalize:
            denom = np.sum(betas[d])
            betas[d] = [beta/denom for beta in betas[d]]

        return betas


    def supervised_learning(self, X, Y):
        '''
        Trains the HMM using the Maximum Likelihood closed form solutions
        for the transition and observation matrices on a labeled
        datset (X, Y). Note that this method does not return anything, but
        instead updates the attributes of the HMM object.
        Arguments:
            X:          A dataset consisting of input sequences in the form
                        of lists of variable length, consisting of integers
                        ranging from 0 to D - 1. In other words, a list of
                        lists.
            Y:          A dataset consisting of state sequences in the form
                        of lists of variable length, consisting of integers
                        ranging from 0 to L - 1. In other words, a list of
                        lists.
                        Note that the elements in X line up with those in Y.
        '''

        # Calculate each element of A using the M-step formulas.
        for prev_state in range(self.L):
          for curr_state in range(self.L):
            numer_array = []
            denom_array = []

            for x in range(len(X)):
              for y in range(1, len(Y[x])):
                if Y[x][y] == curr_state and Y[x][y-1] == prev_state:
                  numer_array.append(1)
                else:
                  numer_array.append(0)

                if Y[x][y-1] == prev_state:
                  denom_array.append(1)
                else:
                  denom_array.append(0)

            numer = np.sum(numer_array)
            denom = np.sum(denom_array)
            self.A[prev_state][curr_state] = numer/denom

        # Calculate each element of O using the M-step formulas.
        for curr_state in range(self.L):
          for curr_obs in range(self.D):
            numer_array = []
            denom_array = []

            for x in range(len(X)):
              for y in range(len(Y[x])):
                if X[x][y] == curr_obs and Y[x][y] == curr_state:
                  numer_array.append(1)
                else:
                  numer_array.append(0)

                if Y[x][y] == curr_state:
                  denom_array.append(1)
                else:
                  denom_array.append(0)

            numer = np.sum(numer_array)
            denom = np.sum(denom_array)
            self.O[curr_state][curr_obs] = numer/denom


    def unsupervised_learning(self, X, N_iters):
        '''
        Trains the HMM using the Baum-Welch algorithm on an unlabeled
        datset X. Note that this method does not return anything, but
        instead updates the attributes of the HMM object.
        Arguments:
            X:          A dataset consisting of input sequences in the form
                        of variable-length lists, consisting of integers
                        ranging from 0 to D - 1. In other words, a list of
                        lists.
            N_iters:    The number of iterations to train on.
        '''

        for i in range(N_iters):
          print(f"{i/N_iters*100}%")
          A_numer = np.zeros((self.L, self.L))
          A_denom = np.zeros((self.L, self.L))
          O_numer = np.zeros((self.L, self.D))
          O_denom = np.zeros((self.L, self.D))

          for x in X:
            alphas = self.forward(x, normalize=True)
            betas = self.backward(x, normalize=True)
            M = len(x)

            for d in range(1, M + 1):
              prob_OAd = np.array([alphas[d][curr_state] * betas[d][curr_state] for curr_state in range(self.L)])
              prob_OAd /= np.sum(prob_OAd)

              for curr_state in range(self.L):
                O_numer[curr_state][x[d-1]] += prob_OAd[curr_state]
                O_denom[curr_state] += prob_OAd[curr_state]
                if d != M:
                  A_denom[curr_state] += prob_OAd[curr_state]

            for d in range(1, M):
              prob_An = np.array([[alphas[d][curr_state] \
                                  * self.O[next_state][x[d]] \
                                  * self.A[curr_state][next_state] \
                                  * betas[d+1][next_state] \
                                  for next_state in range(self.L)] \
                                  for curr_state in range(self.L)])
              prob_An /= np.sum(prob_An)

              for curr_state in range(self.L):
                for next_state in range(self.L):
                  A_numer[curr_state][next_state] += prob_An[curr_state][next_state]

          self.A = A_numer / A_denom
          self.O = O_numer / O_denom


    def generate_emission(self, M, seed=None):
        '''
        Generates an emission of length M, assuming that the starting state
        is chosen uniformly at random.
        Arguments:
            M:          Length of the emission to generate.
        Returns:
            emission:   The randomly generated emission as a list.
            states:     The randomly generated states as a list.
        '''

        # (Re-)Initialize random number generator
        rng = np.random.default_rng(seed=seed)

        emission = []
        states = []

        # Initialize Random Start State
        state = np.random.randint(0, self.L)

        for d in range(M):
          emission.append(np.random.choice(list(range(self.D)), p = self.O[state]))
          states.append(state)
          state = np.random.choice(list(range(self.L)), p = self.A[state])

        return emission, states

    def generate_emission_rev(self, suffix, M, seed=None):
        # (Re-)Initialize random number generator
        rng = np.random.default_rng(seed=seed)

        emission = []
        states = []

        # Initialize Random End State
        state = np.random.randint(0, self.L)
        emission.append(suffix)

        for d in range(1, M):
          prev_state_p = np.array(self.A)[:,state] / sum(np.array(self.A)[:,state])
          state = np.random.choice(list(range(self.L)), p = prev_state_p)
          states.append(state)
          emission.append(np.random.choice(list(range(self.D)), p = self.O[state]))

        return emission, states


    def probability_alphas(self, x):
        '''
        Finds the maximum probability of a given input sequence using
        the forward algorithm.
        Arguments:
            x:          Input sequence in the form of a list of length M,
                        consisting of integers ranging from 0 to D - 1.
        Returns:
            prob:       Total probability that x can occur.
        '''

        # Calculate alpha vectors.
        alphas = self.forward(x)

        # alpha_j(M) gives the probability that the state sequence ends
        # in j. Summing this value over all possible states j gives the
        # total probability of x paired with any state sequence, i.e.
        # the probability of x.
        prob = sum(alphas[-1])
        return prob


    def probability_betas(self, x):
        '''
        Finds the maximum probability of a given input sequence using
        the backward algorithm.
        Arguments:
            x:          Input sequence in the form of a list of length M,
                        consisting of integers ranging from 0 to D - 1.
        Returns:
            prob:       Total probability that x can occur.
        '''

        betas = self.backward(x)

        # beta_j(1) gives the probability that the state sequence starts
        # with j. Summing this, multiplied by the starting transition
        # probability and the observation probability, over all states
        # gives the total probability of x paired with any state
        # sequence, i.e. the probability of x.
        prob = sum([betas[1][j] * self.A_start[j] * self.O[j][x[0]] \
                    for j in range(self.L)])

        return prob


def supervised_HMM(X, Y):
    '''
    Helper function to train a supervised HMM. The function determines the
    number of unique states and observations in the given data, initializes
    the transition and observation matrices, creates the HMM, and then runs
    the training function for supervised learning.
    Arguments:
        X:          A dataset consisting of input sequences in the form
                    of lists of variable length, consisting of integers
                    ranging from 0 to D - 1. In other words, a list of lists.
        Y:          A dataset consisting of state sequences in the form
                    of lists of variable length, consisting of integers
                    ranging from 0 to L - 1. In other words, a list of lists.
                    Note that the elements in X line up with those in Y.
    '''
    # Make a set of observations.
    observations = set()
    for x in X:
        observations |= set(x)

    # Make a set of states.
    states = set()
    for y in Y:
        states |= set(y)

    # Compute L and D.
    L = len(states)
    D = len(observations)

    # Randomly initialize and normalize matrix A.
    A = [[random.random() for i in range(L)] for j in range(L)]

    for i in range(len(A)):
        norm = sum(A[i])
        for j in range(len(A[i])):
            A[i][j] /= norm

    # Randomly initialize and normalize matrix O.
    O = [[random.random() for i in range(D)] for j in range(L)]

    for i in range(len(O)):
        norm = sum(O[i])
        for j in range(len(O[i])):
            O[i][j] /= norm

    # Train an HMM with labeled data.
    HMM = HiddenMarkovModel(A, O)
    HMM.supervised_learning(X, Y)

    return HMM

def unsupervised_HMM(X, n_states, N_iters, seed=None):
    '''
    Helper function to train an unsupervised HMM. The function determines the
    number of unique observations in the given data, initializes
    the transition and observation matrices, creates the HMM, and then runs
    the training function for unsupervised learing.
    Arguments:
        X:          A dataset consisting of input sequences in the form
                    of lists of variable length, consisting of integers
                    ranging from 0 to D - 1. In other words, a list of lists.
        n_states:   Number of hidden states to use in training.

        N_iters:    The number of iterations to train on.
        rng:        The random number generator for reproducible result.
                    Default to RandomState(1).
    '''
    # Initialize random number generator
    rng = np.random.default_rng(seed=seed)

    # Make a set of observations.
    observations = set()
    for x in X:
        observations |= set(x)

    # Compute L and D.
    L = n_states
    D = len(observations)

    # Randomly initialize and normalize matrix A.
    A = [[rng.random() for i in range(L)] for j in range(L)]

    for i in range(len(A)):
        norm = sum(A[i])
        for j in range(len(A[i])):
            A[i][j] /= norm

    # Randomly initialize and normalize matrix O.
    O = [[rng.random() for i in range(D)] for j in range(L)]

    for i in range(len(O)):
        norm = sum(O[i])
        for j in range(len(O[i])):
            O[i][j] /= norm

    # Train an HMM with unlabeled data.
    HMM = HiddenMarkovModel(A, O)
    HMM.unsupervised_learning(X, N_iters)

    return HMM

"""### Helper"""

def parse_observations(text):
    # Convert text to dataset.
    lines = [line.split() for line in text.split('\n') if line.split()]

    obs_counter = 0
    obs = []
    obs_map = {}

    for line in lines:
        obs_elem = []

        for word in line:
            word = re.sub(r'[^\w]', '', word).lower()
            if word not in obs_map:
                # Add unique words to the observations map.
                obs_map[word] = obs_counter
                obs_counter += 1

            # Add the encoded word.
            obs_elem.append(obs_map[word])

        # Add the encoded sequence.
        obs.append(obs_elem)

    return obs, obs_map

def count_syllables(sentence, syllable_dict, target):
  words = sentence.split(" ")
  # Used to determine if there's a possible line for 10 syllables.
  # Handles words with multiple syllable possibilities (Ex: being: {1, 2} --> all_pos = [8, 9]). A line is valid if 0 in all_pos
  all_pos = [target]
  for word in words:
    word = word.lower()
    sylls = 0
    if word in syllable_dict:
      sylls = syllable_dict[word]
    elif word not in syllable_dict and word.replace("'", "") in syllable_dict:
      word = word.replace("'", "")
      sylls = syllable_dict[word]
    elif word in d:
      sylls = nsyl(word)
    else:
      return False
    num_sylls = len(sylls)
    num_pos = len(all_pos)
    all_pos_new = []

    # If the word is the last in the line, check for "E1, E2, etc" values in the syllable possibilities
    if i == len(words) - 1:
      for j in range(num_sylls):
        if sylls[j].startswith("E"):
          for q in range(num_pos):
            all_pos_new.append(all_pos[q] - int(sylls[j][1]))
        else:
          for k in range(num_sylls):
            if not sylls[k].startswith("E"):
              for q in range(num_pos):
                all_pos_new.append(all_pos[q] - int(sylls[k]))
    # Otherwise, update all the possibilities normally (Ex: being: {1, 2}, all_pos = [7, 8] -> [6, 5, 7, 6])
    else:
      for k in range(num_sylls):
        if not sylls[k].startswith("E"):
          for q in range(num_pos):
            all_pos_new.append(all_pos[q] - int(sylls[k]))

    all_pos = all_pos_new
  return 0 in all_pos

def obs_map_reverser(obs_map):
    obs_map_r = {}

    for key in obs_map:
        obs_map_r[obs_map[key]] = key

    return obs_map_r

def sample_sentence(hmm, obs_map, n_words, n_syllables, seed=None):
    # Get reverse map.
    obs_map_r = obs_map_reverser(obs_map)

    # Sample and convert sentence.
    emission, states = hmm.generate_emission(n_words, seed=seed)
    sentence = [obs_map_r[i] for i in emission]
    if not count_syllables(' '.join(sentence).capitalize(), syllable_dict, n_syllables):
      return sample_sentence(hmm, obs_map, n_words, n_syllables, seed)

    return ' '.join(sentence).capitalize()

def sample_sentence_rev(hmm, suffix, obs_map, n_words, n_syllables, seed=None):
    # Get reverse map.
    obs_map_r = obs_map_reverser(obs_map)

    # Sample and convert sentence.
    emission, states = hmm.generate_emission_rev(suffix, n_words, seed=seed)
    sentence = [obs_map_r[i] for i in emission][::-1]
    if not count_syllables(' '.join(sentence).capitalize(), syllable_dict, n_syllables):
      return sample_sentence_rev(hmm, suffix, obs_map, n_words, n_syllables, seed)

    return ' '.join(sentence).capitalize()

"""### Training"""

hmm = unsupervised_HMM(X, 20, 50, seed=123)

"""### Poem generation"""

def create_rhyme(hmm, word_id_dict, rhyme_dict):
  line_n_words = random.randint(6, 10)
  line = sample_sentence(hmm, word_id_dict, line_n_words, 10)
  rhyme_word = line.split()[-1]
  while rhyme_word not in rhyme_dict:
    line = sample_sentence(hmm, word_id_dict, line_n_words, 10)
    rhyme_word = line.split()[-1]
  else:
    rhyme_line_n_words = random.randint(6, 10)
    suffix = np.random.choice(rhyme_dict[rhyme_word])
    rhyme_line = sample_sentence_rev(hmm, word_id_dict[suffix], word_id_dict, rhyme_line_n_words, 10)
    return line, rhyme_line

"""#### Sonnet"""

poem = ""

# 3 quatrains
for quatrain in range(3):
  line_a, rhyme_line_a = create_rhyme(hmm, word_id_dict, rhyme_dict)
  line_b, rhyme_line_b = create_rhyme(hmm, word_id_dict, rhyme_dict)
  poem += line_a + "\n"
  poem += line_b + "\n"
  poem += rhyme_line_a + "\n"
  poem += rhyme_line_b + "\n\n"

# 4th quatrain
line, rhyme_line = create_rhyme(hmm, word_id_dict, rhyme_dict)
poem += line + "\n"
poem += rhyme_line

print(poem)

"""## RNN Code"""

from io import open
import glob
import os
import unicodedata
import string
import tensorflow as tf

all_letters = sorted(list(set(string.printable)))

def unicodeToAscii(s):
    return ''.join(
        c for c in unicodedata.normalize('NFD', s)
        if unicodedata.category(c) != 'Mn'
        and c in all_letters
    )

def readLines(filename):
    with open(filename, encoding='utf-8') as some_file:
        return [unicodeToAscii(line.strip()) for line in some_file]

fixed_len_seqs = {}
sonnet_lines = readLines('/content/shakespeare.txt')
for i, line in enumerate(sonnet_lines):
  sonnet_lines[i] = sonnet_lines[i]
all_text = "".join(sonnet_lines)

index = 0
all_i = 0
while all_i < len(all_text) - 41:
  fixed_len_seqs[index] = all_text[all_i:all_i + 41]
  all_i += 8
  index += 1

sequences = list(fixed_len_seqs.values())

letter_map = {}
for i, c in enumerate(all_letters):
  letter_map[c] = i

encoded_sequences = list()
for seq in sequences:
   encoded_seq = []
   for c in seq:
    encoded_seq.append(letter_map[c])
   encoded_sequences.append(encoded_seq)

encoded_sequences = np.array(encoded_sequences)
X,y = encoded_sequences[:,:-1], encoded_sequences[:,-1]

onehot_encoded_seq = [tf.keras.utils.to_categorical(x, num_classes=len(letter_map)) for x in X]
X = np.array(onehot_encoded_seq)
y = tf.keras.utils.to_categorical(y,num_classes=len(letter_map))

def rnn(X):
  temperature = 0.25
  model = tf.keras.Sequential()
  model.add(tf.keras.layers.LSTM(150, input_shape=(40, len(all_letters))))
  model.add(tf.keras.layers.Dense(len(letter_map), activation='softmax'))
  model.add(tf.keras.layers.Lambda(lambda x: x / temperature))
  model.compile(loss='categorical_crossentropy', optimizer='adam')
  return model

rnn = rnn(X)
rnn.fit(X, y, epochs=20)

def sample(model, letter_map, seed):
    encoded_seq = [letter_map[char] for char in seed]
    encoded_seq =  tf.keras.utils.pad_sequences([encoded_seq], maxlen=40, truncating='pre')[0]
    encoded_seq = tf.keras.utils.to_categorical(encoded_seq, num_classes=len(letter_map))
    encoded_seq =  encoded_seq.reshape(1, encoded_seq.shape[0], encoded_seq.shape[1])
    yhat = np.argmax(rnn.predict(encoded_seq), axis=1)
    out_char = ''
    for char, i in letter_map.items():
      if i == yhat:
        out_char = char
        break
    seed += out_char
    return seed

input = "shall i compare thee to a summer's day?"
for j in range(14):
  for j in range(100):
    input = sample(rnn, letter_map, input)

print(input)

"""## Additional Goal

### Rhyme (Incorporated in sonnet generation above)

### Haiku
"""

poem = ""
poem += sample_sentence(hmm, word_id_dict, random.randint(2, 5), 5) + "\n"
poem += sample_sentence(hmm, word_id_dict, random.randint(3, 7), 7) + "\n"
poem += sample_sentence(hmm, word_id_dict, random.randint(2, 5), 5)

print(poem)

"""### Limerick"""

def create_rhyme_n(hmm, word_id_dict, rhyme_dict, n_lines, n_min, n_max, syllables):
  line_n_words = random.randint(n_min, n_max)
  line = sample_sentence(hmm, word_id_dict, line_n_words, syllables)
  rhyme_word = line.split()[-1]
  while rhyme_word not in rhyme_dict:
    line = sample_sentence(hmm, word_id_dict, line_n_words, syllables)
    rhyme_word = line.split()[-1]
  else:
    rhyme_lines = []
    for _ in range(n_lines-1):
      line_n_words = random.randint(n_min, n_max)
      suffix = np.random.choice(rhyme_dict[rhyme_word])
      rhyme_lines.append(sample_sentence_rev(hmm, word_id_dict[suffix], word_id_dict, line_n_words, syllables))
    return line, rhyme_lines

poem = ""

line_a, rhyme_lines_a = create_rhyme_n(hmm, word_id_dict, rhyme_dict, 3, 8, 8, 10)
line_b, rhyme_lines_b = create_rhyme_n(hmm, word_id_dict, rhyme_dict, 2, 5, 5, 8)
poem += line_a + "\n"
poem += rhyme_lines_a[0] + "\n"
poem += line_b + "\n"
poem += rhyme_lines_b[0] + "\n"
poem += rhyme_lines_a[1]

print(poem)

"""## Visualization"""

####################
# HMM VISUALIZATION FUNCTIONS
####################

def visualize_sparsities(hmm, O_max_cols=50, O_vmax=0.1):
    plt.close('all')
    plt.set_cmap('viridis')

    # Visualize sparsity of A.
    plt.imshow(hmm.A, vmax=1.0)
    plt.colorbar()
    plt.title('Sparsity of A matrix')
    plt.show()

    # Visualize parsity of O.
    plt.imshow(np.array(hmm.O)[:, :O_max_cols], vmax=O_vmax, aspect='auto')
    plt.colorbar()
    plt.title('Sparsity of O matrix')
    plt.show()


####################
# HMM ANIMATION FUNCTIONS
####################

def animate_emission(hmm, obs_map, M=8, height=12, width=12, delay=1, seed=None):
    # Parameters.
    lim = 1200
    text_x_offset = 40
    text_y_offset = 80
    x_offset = 580
    y_offset = 520
    R = 420
    r = 100
    arrow_size = 20
    arrow_p1 = 0.03
    arrow_p2 = 0.02
    arrow_p3 = 0.06

    # Initialize.
    n_states = len(hmm.A)
    obs_map_r = obs_map_reverser(obs_map)
    wordclouds = states_to_wordclouds(hmm, obs_map, max_words=20, show=False)

    # Initialize plot.
    fig, ax = plt.subplots()
    fig.set_figheight(height)
    fig.set_figwidth(width)
    ax.grid('off')
    plt.axis('off')
    ax.set_xlim([0, lim])
    ax.set_ylim([0, lim])

    # Plot each wordcloud.
    for i, wordcloud in enumerate(wordclouds):
        x = x_offset + int(R * np.cos(np.pi * 2 * i / n_states))
        y = y_offset + int(R * np.sin(np.pi * 2 * i / n_states))
        ax.imshow(wordcloud.to_array(), extent=(x - r, x + r, y - r, y + r), aspect='auto', zorder=-1)

    # Initialize text.
    text = ax.text(text_x_offset, lim - text_y_offset, '', fontsize=24)

    # Make the arrows.
    zorder_mult = n_states ** 2 * 100
    arrows = []
    for i in range(n_states):
        row = []
        for j in range(n_states):
            # Arrow coordinates.
            x_i = x_offset + R * np.cos(np.pi * 2 * i / n_states)
            y_i = y_offset + R * np.sin(np.pi * 2 * i / n_states)
            x_j = x_offset + R * np.cos(np.pi * 2 * j / n_states)
            y_j = y_offset + R * np.sin(np.pi * 2 * j / n_states)

            dx = x_j - x_i
            dy = y_j - y_i
            d = np.sqrt(dx**2 + dy**2)

            if i != j:
                arrow = ax.arrow(x_i + (r/d + arrow_p1) * dx + arrow_p2 * dy,
                                 y_i + (r/d + arrow_p1) * dy + arrow_p2 * dx,
                                 (1 - 2 * r/d - arrow_p3) * dx,
                                 (1 - 2 * r/d - arrow_p3) * dy,
                                 color=(1 - hmm.A[i][j], ) * 3,
                                 head_width=arrow_size, head_length=arrow_size,
                                 zorder=int(hmm.A[i][j] * zorder_mult))
            else:
                arrow = ax.arrow(x_i, y_i, 0, 0,
                                 color=(1 - hmm.A[i][j], ) * 3,
                                 head_width=arrow_size, head_length=arrow_size,
                                 zorder=int(hmm.A[i][j] * zorder_mult))

            row.append(arrow)
        arrows.append(row)

    emission, states = hmm.generate_emission(M, seed=seed)

    def animate(i):
        if i >= delay:
            i -= delay

            if i == 0:
                arrows[states[0]][states[0]].set_color('red')
            elif i == 1:
                arrows[states[0]][states[0]].set_color((1 - hmm.A[states[0]][states[0]], ) * 3)
                arrows[states[i - 1]][states[i]].set_color('red')
            else:
                arrows[states[i - 2]][states[i - 1]].set_color((1 - hmm.A[states[i - 2]][states[i - 1]], ) * 3)
                arrows[states[i - 1]][states[i]].set_color('red')

            # Set text.
            text.set_text(' '.join([obs_map_r[e] for e in emission][:i+1]).capitalize())

            return arrows + [text]

    # Animate!
    print('\nAnimating...')
    anim = FuncAnimation(fig, animate, frames=M+delay, interval=1000)

    return anim


####################
# WORDCLOUD FUNCTIONS
####################

def mask():
    # Parameters.
    r = 128
    d = 2 * r + 1

    # Get points in a circle.
    y, x = np.ogrid[-r:d-r, -r:d-r]
    circle = (x**2 + y**2 <= r**2)

    # Create mask.
    mask = 255 * np.ones((d, d), dtype=np.uint8)
    mask[circle] = 0

    return mask

def text_to_wordcloud(text, max_words=50, title='', show=True):
    plt.close('all')

    # Generate a wordcloud image.
    wordcloud = WordCloud(random_state=0,
                          max_words=max_words,
                          background_color='white',
                          mask=mask()).generate(text)

    # Show the image.
    if show:
        plt.imshow(wordcloud, interpolation='bilinear')
        plt.axis('off')
        plt.title(title, fontsize=24)
        plt.show()

    return wordcloud

def states_to_wordclouds(hmm, obs_map, max_words=50, show=True):
    # Initialize.
    M = 100000
    n_states = len(hmm.A)
    obs_map_r = obs_map_reverser(obs_map)
    wordclouds = []

    # Generate a large emission.
    emission, states = hmm.generate_emission(M)

    # For each state, get a list of observations that have been emitted
    # from that state.
    obs_count = []
    for i in range(n_states):
        obs_lst = np.array(emission)[np.where(np.array(states) == i)[0]]
        obs_count.append(obs_lst)

    # For each state, convert it into a wordcloud.
    for i in range(n_states):
        obs_lst = obs_count[i]
        sentence = [obs_map_r[j] for j in obs_lst]
        sentence_str = ' '.join(sentence)

        wordclouds.append(text_to_wordcloud(sentence_str, max_words=max_words, title='State %d' % i, show=show))

    return wordclouds

visualize_sparsities(hmm, O_max_cols=50)

hmm1 = unsupervised_HMM(X, 1, 10, seed=123)
print('\nSample Sentence:\n====================')
print(sample_sentence(hmm1, word_id_dict, 8, 10))

hmm2 = unsupervised_HMM(X, 2, 100, seed=123)
print('\nSample Sentence:\n====================')
print(sample_sentence(hmm2, word_id_dict, 8, 10))

hmm4 = unsupervised_HMM(X, 4, 100, seed=123)
print('\nSample Sentence:\n====================')
print(sample_sentence(hmm4, word_id_dict, 4, 10))

hmm8 = unsupervised_HMM(X, 8, 100, seed=123)
print('\nSample Sentence:\n====================')
print(sample_sentence(hmm8, word_id_dict, 8, 10))

hmm16 = unsupervised_HMM(X, 16, 100, seed=123)
print('\nSample Sentence:\n====================')
print(sample_sentence(hmm16, word_id_dict, 8, 10))

wordclouds = states_to_wordclouds(hmm8, word_id_dict)

from IPython.display import HTML
anim = animate_emission(hmm8, word_id_dict, M=8, seed=123)
HTML(anim.to_html5_video())